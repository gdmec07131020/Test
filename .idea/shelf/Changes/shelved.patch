Index: src/main/java/org/example/TankGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/TankGame.java b/src/main/java/org/example/TankGame.java
new file mode 100644
--- /dev/null	(date 1723801329326)
+++ b/src/main/java/org/example/TankGame.java	(date 1723801329326)
@@ -0,0 +1,265 @@
+package org.example;
+
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.KeyAdapter;
+import java.awt.event.KeyEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+public class TankGame extends JPanel implements Runnable {
+    private static final int WIDTH = 800;
+    private static final int HEIGHT = 600;
+    private static final int TANK_SIZE = 50;
+    private static final int BULLET_SIZE = 10;
+    private static final int ENEMY_SIZE = 50;
+    private static final int DELAY = 50;
+
+    private Tank player;
+    private List<Bullet> bullets;
+    private List<Enemy> enemies;
+    private boolean running;
+    private Random rand;
+
+    public TankGame() {
+        setPreferredSize(new Dimension(WIDTH, HEIGHT));
+        setFocusable(true);
+        addKeyListener(new TAdapter());
+        initGame();
+    }
+
+    private void initGame() {
+        player = new Tank(WIDTH / 2, HEIGHT - TANK_SIZE);
+        bullets = new ArrayList<>();
+        enemies = new ArrayList<>();
+        rand = new Random();
+        running = true;
+    }
+
+    @Override
+    public void paintComponent(Graphics g) {
+        super.paintComponent(g);
+        if (running) {
+            drawBackground(g);
+            drawPlayer(g);
+            drawBullets(g);
+            drawEnemies(g);
+        } else {
+            gameOver(g);
+        }
+        Toolkit.getDefaultToolkit().sync();
+    }
+
+    private void drawBackground(Graphics g) {
+        g.setColor(Color.BLACK);
+        g.fillRect(0, 0, WIDTH, HEIGHT);
+    }
+
+    private void drawPlayer(Graphics g) {
+        g.setColor(Color.GREEN);
+        g.fillRect(player.x, player.y, TANK_SIZE, TANK_SIZE);
+    }
+
+    private void drawBullets(Graphics g) {
+        g.setColor(Color.YELLOW);
+        for (Bullet bullet : bullets) {
+            g.fillRect(bullet.x, bullet.y, BULLET_SIZE, BULLET_SIZE);
+        }
+    }
+
+    private void drawEnemies(Graphics g) {
+        g.setColor(Color.RED);
+        for (Enemy enemy : enemies) {
+            g.fillRect(enemy.x, enemy.y, ENEMY_SIZE, ENEMY_SIZE);
+        }
+    }
+
+    private void gameOver(Graphics g) {
+        g.setColor(Color.WHITE);
+        g.setFont(new Font("Arial", Font.BOLD, 48));
+        g.drawString("Game Over", WIDTH / 2 - 120, HEIGHT / 2);
+    }
+
+    @Override
+    public void run() {
+        long startTime;
+        long elapsedTime;
+        long waitTime;
+
+        while (running) {
+            startTime = System.nanoTime();
+
+            update();
+            repaint();
+
+            elapsedTime = System.nanoTime() - startTime;
+            waitTime = DELAY - elapsedTime / 1000000;
+            if (waitTime < 0) {
+                waitTime = 5;
+            }
+
+            try {
+                Thread.sleep(waitTime);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private void update() {
+        updatePlayer();
+        updateBullets();
+        updateEnemies();
+        checkCollisions();
+    }
+
+    private void updatePlayer() {
+        if (player.left && player.x > 0) {
+            player.x -= player.dx;
+        }
+        if (player.right && player.x < WIDTH - TANK_SIZE) {
+            player.x += player.dx;
+        }
+        if (player.up && player.y > 0) {
+            player.y -= player.dy;
+        }
+        if (player.down && player.y < HEIGHT - TANK_SIZE) {
+            player.y += player.dy;
+        }
+    }
+
+    private void updateBullets() {
+        List<Bullet> newBullets = new ArrayList<>();
+        for (Bullet bullet : bullets) {
+            bullet.y -= bullet.dy;
+            if (bullet.y > 0) {
+                newBullets.add(bullet);
+            }
+        }
+        bullets = newBullets;
+    }
+
+    private void updateEnemies() {
+        if (rand.nextInt(100) < 3) {
+            enemies.add(new Enemy(rand.nextInt(WIDTH - ENEMY_SIZE), 0));
+        }
+        List<Enemy> newEnemies = new ArrayList<>();
+        for (Enemy enemy : enemies) {
+            enemy.y += enemy.dy;
+            if (enemy.y < HEIGHT) {
+                newEnemies.add(enemy);
+            }
+        }
+        enemies = newEnemies;
+    }
+
+    private void checkCollisions() {
+        for (Enemy enemy : enemies) {
+            if (player.x < enemy.x + ENEMY_SIZE &&
+                    player.x + TANK_SIZE > enemy.x &&
+                    player.y < enemy.y + ENEMY_SIZE &&
+                    player.y + TANK_SIZE > enemy.y) {
+                running = false;
+            }
+        }
+        List<Bullet> newBullets = new ArrayList<>();
+        List<Enemy> newEnemies = new ArrayList<>();
+        for (Bullet bullet : bullets) {
+            for (Enemy enemy : enemies) {
+                if (bullet.x < enemy.x + ENEMY_SIZE &&
+                        bullet.x + BULLET_SIZE > enemy.x &&
+                        bullet.y < enemy.y + ENEMY_SIZE &&
+                        bullet.y + BULLET_SIZE > enemy.y) {
+                    continue;
+                }
+                newEnemies.add(enemy);
+            }
+            newBullets.add(bullet);
+        }
+        bullets = newBullets;
+        enemies = newEnemies;
+    }
+
+    private class TAdapter extends KeyAdapter {
+        @Override
+        public void keyPressed(KeyEvent e) {
+            int key = e.getKeyCode();
+            if (key == KeyEvent.VK_LEFT) {
+                player.left = true;
+            }
+            if (key == KeyEvent.VK_RIGHT) {
+                player.right = true;
+            }
+            if (key == KeyEvent.VK_UP) {
+                player.up = true;
+            }
+            if (key == KeyEvent.VK_DOWN) {
+                player.down = true;
+            }
+            if (key == KeyEvent.VK_SPACE) {
+                bullets.add(new Bullet(player.x + TANK_SIZE / 2, player.y));
+            }
+        }
+
+        @Override
+        public void keyReleased(KeyEvent e) {
+            int key = e.getKeyCode();
+            if (key == KeyEvent.VK_LEFT) {
+                player.left = false;
+            }
+            if (key == KeyEvent.VK_RIGHT) {
+                player.right = false;
+            }
+            if (key == KeyEvent.VK_UP) {
+                player.up = false;
+            }
+            if (key == KeyEvent.VK_DOWN) {
+                player.down = false;
+            }
+        }
+    }
+
+    private class Tank {
+        int x, y;
+        int dx = 5;
+        int dy = 5;
+        boolean left, right, up, down;
+
+        Tank(int x, int y) {
+            this.x = x;
+            this.y = y;
+        }
+    }
+
+    private class Bullet {
+        int x, y;
+        int dy = 10;
+
+        Bullet(int x, int y) {
+            this.x = x;
+            this.y = y;
+        }
+    }
+
+    private class Enemy {
+        int x, y;
+        int dy = 2;
+
+        Enemy(int x, int y) {
+            this.x = x;
+            this.y = y;
+        }
+    }
+
+    public static void main(String[] args) {
+        JFrame frame = new JFrame("坦克大战");
+        TankGame game = new TankGame();
+        frame.add(game);
+        frame.pack();
+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        frame.setLocationRelativeTo(null);
+        frame.setVisible(true);
+        new Thread(game).start();
+    }
+}
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1723799038613)
+++ b/.idea/encodings.xml	(date 1723799038613)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1723799031593)
+++ b/.gitignore	(date 1723799031593)
@@ -0,0 +1,38 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### IntelliJ IDEA ###
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: src/main/java/org/example/PlaneWarGame1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/PlaneWarGame1.java b/src/main/java/org/example/PlaneWarGame1.java
new file mode 100644
--- /dev/null	(date 1723799609693)
+++ b/src/main/java/org/example/PlaneWarGame1.java	(date 1723799609693)
@@ -0,0 +1,250 @@
+package org.example;
+
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.KeyAdapter;
+import java.awt.event.KeyEvent;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+public class PlaneWarGame1 extends JPanel implements Runnable {
+    private static final int WIDTH = 800;
+    private static final int HEIGHT = 600;
+    private static final int PLANE_SIZE = 50;
+    private static final int BULLET_SIZE = 10;
+    private static final int ENEMY_SIZE = 50;
+    private static final int DELAY = 10;
+
+    private Image background;
+    private Plane player;
+    private List<Bullet> bullets;
+    private List<Enemy> enemies;
+    private boolean running;
+
+    public PlaneWarGame1() {
+        setPreferredSize(new Dimension(WIDTH, HEIGHT));
+        setFocusable(true);
+        addKeyListener(new TAdapter());
+        loadBackground();
+        initGame();
+    }
+
+    private void loadBackground() {
+        background = new ImageIcon("background.jpg").getImage();
+    }
+
+    private void initGame() {
+        player = new Plane(WIDTH / 2, HEIGHT - PLANE_SIZE);
+        bullets = new ArrayList<>();
+        enemies = new ArrayList<>();
+        running = true;
+    }
+
+    @Override
+    public void paintComponent(Graphics g) {
+        super.paintComponent(g);
+        if (running) {
+            drawBackground(g);
+            drawPlayer(g);
+            drawBullets(g);
+            drawEnemies(g);
+        } else {
+            gameOver(g);
+        }
+        Toolkit.getDefaultToolkit().sync();
+    }
+
+    private void drawBackground(Graphics g) {
+        g.drawImage(background, 0, 0, WIDTH, HEIGHT, this);
+    }
+
+    private void drawPlayer(Graphics g) {
+        g.setColor(Color.GREEN);
+        g.fillRect(player.x, player.y, PLANE_SIZE, PLANE_SIZE);
+    }
+
+    private void drawBullets(Graphics g) {
+        g.setColor(Color.YELLOW);
+        for (Bullet bullet : bullets) {
+            g.fillRect(bullet.x, bullet.y, BULLET_SIZE, BULLET_SIZE);
+        }
+    }
+
+    private void drawEnemies(Graphics g) {
+        g.setColor(Color.RED);
+        for (Enemy enemy : enemies) {
+            g.fillRect(enemy.x, enemy.y, ENEMY_SIZE, ENEMY_SIZE);
+        }
+    }
+
+    private void gameOver(Graphics g) {
+        g.setColor(Color.WHITE);
+        g.setFont(new Font("Arial", Font.BOLD, 48));
+        g.drawString("Game Over", WIDTH / 2 - 120, HEIGHT / 2);
+    }
+
+    @Override
+    public void run() {
+        long startTime;
+        long elapsedTime;
+        long waitTime;
+
+        while (running) {
+            startTime = System.nanoTime();
+
+            update();
+            repaint();
+
+            elapsedTime = System.nanoTime() - startTime;
+            waitTime = DELAY - elapsedTime / 1000000;
+            if (waitTime < 0) {
+                waitTime = 5;
+            }
+
+            try {
+                Thread.sleep(waitTime);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private void update() {
+        updatePlayer();
+        updateBullets();
+        updateEnemies();
+        checkCollisions();
+    }
+
+    private void updatePlayer() {
+        if (player.left && player.x > 0) {
+            player.x -= player.dx;
+        }
+        if (player.right && player.x < WIDTH - PLANE_SIZE) {
+            player.x += player.dx;
+        }
+    }
+
+    private void updateBullets() {
+        List<Bullet> newBullets = new ArrayList<>();
+        for (Bullet bullet : bullets) {
+            bullet.y -= bullet.dy;
+            if (bullet.y > 0) {
+                newBullets.add(bullet);
+            }
+        }
+        bullets = newBullets;
+    }
+
+    private void updateEnemies() {
+        Random rand = new Random();
+        if (rand.nextInt(100) < 3) {
+            enemies.add(new Enemy(rand.nextInt(WIDTH - ENEMY_SIZE), 0));
+        }
+        List<Enemy> newEnemies = new ArrayList<>();
+        for (Enemy enemy : enemies) {
+            enemy.y += enemy.dy;
+            if (enemy.y < HEIGHT) {
+                newEnemies.add(enemy);
+            }
+        }
+        enemies = newEnemies;
+    }
+
+    private void checkCollisions() {
+        for (Enemy enemy : enemies) {
+            if (player.x < enemy.x + ENEMY_SIZE &&
+                    player.x + PLANE_SIZE > enemy.x &&
+                    player.y < enemy.y + ENEMY_SIZE &&
+                    player.y + PLANE_SIZE > enemy.y) {
+                running = false;
+            }
+        }
+        List<Bullet> newBullets = new ArrayList<>();
+        List<Enemy> newEnemies = new ArrayList<>();
+        for (Bullet bullet : bullets) {
+            for (Enemy enemy : enemies) {
+                if (bullet.x < enemy.x + ENEMY_SIZE &&
+                        bullet.x + BULLET_SIZE > enemy.x &&
+                        bullet.y < enemy.y + ENEMY_SIZE &&
+                        bullet.y + BULLET_SIZE > enemy.y) {
+                    continue;
+                }
+                newEnemies.add(enemy);
+            }
+            newBullets.add(bullet);
+        }
+        bullets = newBullets;
+        enemies = newEnemies;
+    }
+
+    private class TAdapter extends KeyAdapter {
+        @Override
+        public void keyPressed(KeyEvent e) {
+            int key = e.getKeyCode();
+            if (key == KeyEvent.VK_LEFT) {
+                player.left = true;
+            }
+            if (key == KeyEvent.VK_RIGHT) {
+                player.right = true;
+            }
+            if (key == KeyEvent.VK_SPACE) {
+                bullets.add(new Bullet(player.x + PLANE_SIZE / 2, player.y));
+            }
+        }
+
+        @Override
+        public void keyReleased(KeyEvent e) {
+            int key = e.getKeyCode();
+            if (key == KeyEvent.VK_LEFT) {
+                player.left = false;
+            }
+            if (key == KeyEvent.VK_RIGHT) {
+                player.right = false;
+            }
+        }
+    }
+
+    private class Plane {
+        int x, y;
+        int dx = 5;
+        boolean left, right;
+
+        Plane(int x, int y) {
+            this.x = x;
+            this.y = y;
+        }
+    }
+
+    private class Bullet {
+        int x, y;
+        int dy = 10;
+
+        Bullet(int x, int y) {
+            this.x = x;
+            this.y = y;
+        }
+    }
+
+    private class Enemy {
+        int x, y;
+        int dy = 2;
+
+        Enemy(int x, int y) {
+            this.x = x;
+            this.y = y;
+        }
+    }
+
+    public static void main(String[] args) {
+        JFrame frame = new JFrame("飞机大战");
+        PlaneWarGame1 game = new PlaneWarGame1();
+        frame.add(game);
+        frame.pack();
+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        frame.setLocationRelativeTo(null);
+        frame.setVisible(true);
+        new Thread(game).start();
+    }
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1723799034605)
+++ b/.idea/vcs.xml	(date 1723799034605)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(date 1723799037759)
+++ b/pom.xml	(date 1723799037759)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>Test</artifactId>
+    <version>1.0-SNAPSHOT</version>
+
+    <properties>
+        <maven.compiler.source>8</maven.compiler.source>
+        <maven.compiler.target>8</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1723799034405)
+++ b/.idea/misc.xml	(date 1723799034405)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1723799038333)
+++ b/.idea/.gitignore	(date 1723799038333)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1723799609725)
+++ b/.idea/uiDesigner.xml	(date 1723799609725)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
